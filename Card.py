import json
from typing import List, Dict, Any, Optional

class Card:
    def __init__(self, data: Dict[str, Any]):
        self.object = data.get("object")
        self.id = data.get("id")
        self.oracle_id = data.get("oracle_id")
        self.multiverse_ids = data.get("multiverse_ids", [])
        self.mtgo_id = data.get("mtgo_id")
        self.arena_id = data.get("arena_id")
        self.tcgplayer_id = data.get("tcgplayer_id")
        self.cardmarket_id = data.get("cardmarket_id")
        self.name = data.get("name")
        self.lang = data.get("lang")
        self.released_at = data.get("released_at")
        self.uri = data.get("uri")
        self.scryfall_uri = data.get("scryfall_uri")
        self.layout = data.get("layout")
        self.highres_image = data.get("highres_image")
        self.image_status = data.get("image_status")
        self.image_uris = data.get("image_uris", {})
        self.card_faces = data.get("card_faces", {})
        self.mana_cost = data.get("mana_cost")
        self.cmc = data.get("cmc")
        self.type_line = data.get("type_line")
        self.oracle_text = data.get("oracle_text")
        self.loyalty = data.get("loyalty")
        self.colors = data.get("colors", [])
        self.color_identity = data.get("color_identity", [])
        self.keywords = data.get("keywords", [])
        self.legalities = data.get("legalities", {})
        self.games = data.get("games", [])
        self.reserved = data.get("reserved")
        self.foil = data.get("foil")
        self.nonfoil = data.get("nonfoil")
        self.finishes = data.get("finishes", [])
        self.oversized = data.get("oversized")
        self.promo = data.get("promo")
        self.reprint = data.get("reprint")
        self.variation = data.get("variation")
        self.set_id = data.get("set_id")
        self.set = data.get("set")
        self.set_name = data.get("set_name")
        self.set_type = data.get("set_type")
        self.set_uri = data.get("set_uri")
        self.set_search_uri = data.get("set_search_uri")
        self.scryfall_set_uri = data.get("scryfall_set_uri")
        self.rulings_uri = data.get("rulings_uri")
        self.prints_search_uri = data.get("prints_search_uri")
        self.collector_number = data.get("collector_number")
        self.digital = data.get("digital")
        self.rarity = data.get("rarity")
        self.card_back_id = data.get("card_back_id")
        self.artist = data.get("artist")
        self.artist_ids = data.get("artist_ids", [])
        self.illustration_id = data.get("illustration_id")
        self.border_color = data.get("border_color")
        self.frame = data.get("frame")
        self.security_stamp = data.get("security_stamp")
        self.full_art = data.get("full_art")
        self.textless = data.get("textless")
        self.booster = data.get("booster")
        self.story_spotlight = data.get("story_spotlight")
        self.edhrec_rank = data.get("edhrec_rank")
        self.penny_rank = data.get("penny_rank")
        self.preview = data.get("preview", {})
        self.prices = data.get("prices", {})
        self.related_uris = data.get("related_uris", {})
        self.purchase_uris = data.get("purchase_uris", {})

    def get(self, attribute: str) -> Any:
       return getattr(self, attribute, None)
    
    def __repr__(self):
        return f"Card(name={self.name}, set={self.set}, rarity={self.rarity})"
